var twilio = require("twilio");
var _ = require('underscore.js');
var SummaryModule = require("cloud/summary.js");
var N = require("cloud/notifications.js");
var utils = require("cloud/utils.js");
var TestDataModule = require('cloud/testdata.js');

twilio.initialize("AC2b2e38289a4d2b9cc7852e706ad05dfb", "e88e51a8d6acb7487bc4b22b8bfb324b");

//Confirm phone Number
Parse.Cloud.define("confirmPhoneNumber", function(request, response) {

	var random4Digit = ("" + Math.random()).substring(2, 6);

	var msg = "Your verification code is " + random4Digit;

	var dUser = request.params.duser;
	var cellNumber = request.params.number;

	var User = Parse.Object.extend("_User");
	var query = new Parse.Query(User);

	query.get(dUser, {
		success : function(userOb) {// Query success

			// Now save the random 4 digit
			userOb.set("phone", cellNumber);
			userOb.set("verificationCode", random4Digit);
			userOb.save();

			twilio.sendSMS({
				From : "+15005550006",
				To : cellNumber,
				Body : msg
			}, {
				success : function(httpResponse) {
					console.log(httpResponse);
					response.success("success");
				},
				error : function(httpResponse) {
					console.error(httpResponse);
					response.error("smsFailed");
				}
			});
			// send of send SMS

		},
		error : function(object, error) {// error with Query to get a User
			// error is a Parse.Error with an error code and message.
			console.error("Query failed " + JSON.stringify(error));
			response.error("unableToLoadUser");
		}
	});
	// end of query.get

});
//confirmPhoneNumber

// Validate Verification Code
Parse.Cloud.define("validateVerificationCode", function(request, response) {

	var dUser = request.params.duser;
	var digits = request.params.digits;

	var User = Parse.Object.extend("_User");
	var query = new Parse.Query(User);

	query.get(dUser, {

		success : function(userOb) {

			var savedCode = userOb.get("verificationCode");

			if (savedCode == digits) {

				userOb.set("phoneVerified", true);
				userOb.save();

				response.success("verified");

			} else {

				response.error("confirmationCodeNotMatching");

			}

		},
		error : function(object, error) {

			console.error("Query failed " + JSON.stringify(error));
			response.error("unableToLoadUser");

		}
	});
	// end query.get

});
// End of validateVerificationCode

//Test Data : {"coachId":"tshO1U2vua","userId":"vXui2W8A7D","beginDate":"2015-05-31T00:00:00.000Z","endDate":"2015-06-07T00:00:00.000Z","profileBeginDate":"2015-05-31T00:00:00.000Z","beginWeekDay":"0"}
//Begin load meals cloud function
// Need to test scenario where week 0
// Need to test scenario where in Week 0 there are 0 meals.
//TODO: Need a trigger ... On Save of new user .. create Summary Card 1
Parse.Cloud.define("runUserSummary", function(request, response) {

	var coachId = request.params.coachId;
	var userId = request.params.userId;

	var beginDate = request.params.beginDate;
	var endDate = request.params.endDate;
	var profileBeginDate = request.params.profileBeginDate;
	var beginWeekDay = request.params.beginWeekDay;

	var userPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : userId
	};

	var coachPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : coachId
	};

	var ret = SummaryModule.saveUserMealSummary(coachPointer, userPointer, beginDate, endDate, profileBeginDate, beginWeekDay);

	ret.then(function() {
		response.success("Summary Run Successful");
	}, function(error) {
		response.error("Error running summary " + JSON.stringify(error));
	});

});
// end of cloud function Load Melas

Parse.Cloud.define("runUsersSummary", function(request, response) {

	SummaryModule.processUsersSummary().then(function() {
		response.success("Summary Run Successfully");
	}, function(error) {
		response.error("Error Running Summary " + JSON.stringify(error));
	});

});
// end of cloud function runSummary

// Weekly Summary Cron Job
Parse.Cloud.job("weeklySummary", function(request, status) {

	// This runs past midnight ... every night ...
	// if this runs midnight ... then it needs to process day before ... or Start day is Today ...

	// End of week = Start of week -1
	// Start of week = end + 1

	// This job wakes up daily, checks day of week

	// Loads all users whose end of week day is set to be same as today
	// For each of them, labels the weeks , and creates end of week summary

	// Set up to modify user data
	Parse.Cloud.useMasterKey();

	SummaryModule.processUsersSummary().then(function() {
		status.success("Summary Run Successfully");
	}, function(error) {
		status.error("Error Running Summary " + JSON.stringify(error));
	});

});
// end of weekly summary job

// Make sure that CoachID is unique.
Parse.Cloud.beforeSave(Parse.User, function(request, response) {

	//TODO: Revise this code...
	// Hold CoachID

	var coachId = request.object.get("coachId");

	console.log("Coach ID coming back " + coachId);

	var objectId = request.object.id;

	// Make sure this call is to register new Coach.
	if (coachId && !objectId) {
		// Make sure that CoachID is not already taken.
		var query = new Parse.Query("User");
		query.equalTo("coachId", coachId);
		query.first({
			success : function(object) {
				if (object) {
					response.error("CoachIdIsTaken");
				} else {
					response.success();
				}
			},
			error : function(error) {
				response.error("Could not validate uniqueness CoachID");
			}
		});
	} else {
		response.success();
	}
});

// Find Coach User to link with using provided CoachID parameter.
Parse.Cloud.beforeSave("CoachUserLink", function(request, response) {

	//TODO: Revise this code.
	// Hold CoachID
	var coachId = request.object.get("coachId");

	console.log("Coach ID sent before save coachUserLink " + coachId);
	if (!coachId) {
		response.success();
		return;
	}
	//TODO: Add Coach to User Table.
	// Find Coach User object with provided CoachID.
	var query = new Parse.Query(Parse.User);
	query.equalTo("coachId", coachId);
	query.first({
		success : function(coach) {
			if (coach) {
				// Replace CoachID within CoachUserLink with Coach User object.
				request.object.unset("coachId");
				request.object.set("coach", coach);
				console.log("Coach set ");
				response.success();
			} else {
				response.error("CoachNotFound");
			}
		},
		error : function(error) {
			response.error("QueryError");
		}
	});

});

/**
 * Notify user after CoachUserLink is updated ..
 */
Parse.Cloud.afterSave("CoachUserLink", function(request) {

	//Validate if this is a new user link and not an update...

	var today = new Date();
	var coachUserLink = request.object;

	var linkedAt = coachUserLink.get('linkedAt');
	var rejectedAt = coachUserLink.get("rejectedAt");
	var cancelledAt = coachUserLink.get("cancelledAt");
	var terminatedAt = coachUserLink.get("terminatedAt");
	var terminatedBy = coachUserLink.get("terminatedBy");
	var coach = coachUserLink.get("coach");
	var user = coachUserLink.get("user");

	// User and Coach need both be set
	if (user && coach) {

		if (utils.setAndWithinSeconds(linkedAt, today)) {

			var userQuery = new Parse.Query(Parse.User);

			userQuery.get(user.objectId).then(function(theUser) {

				if (utils.setAndWithinSeconds(terminatedAt, today)) {
					theUser.unset("coach");
				} else {
					theUser.set("coach", coach);
				}

				return theUser.save();
			}).then(function() {

				if (utils.setAndWithinSeconds(terminatedAt, today)) {

					//TODO: Check terminated by who
					console.log(JSON.stringify(terminatedBy) + " terminated by and " + JSON.stringify(user) + " and " + JSON.stringify(coach));

					if (terminatedBy == user) {
						N.sendNotification(coach, N.NOTIFICATION_TYPE_USER_UNLINKED, user, coach);
					} else {
						N.sendNotification(user, N.NOTIFICATION_TYPE_COACH_UNLINKED, user, coach);
					}

				} else {

					N.sendNotification(user, N.NOTIFICATION_TYPE_COACH_ACCEPTED_LINK_REQUEST, user, coach);

				}

			}, function(error) {
				console.error(JSON.stringify(error));
			});

			return;

		} else if (utils.setAndWithinSeconds(rejectedAt, today)) {

			// Coach rejected linking request ... Oh no !
			// User needs to be notified
			N.sendNotification(user, N.NOTIFICATION_TYPE_COACH_REJECTED_LINK_REQUEST, user, coach);

		} else if (utils.setAndWithinSeconds(cancelledAt, today)) {
			// User got bored of waiting and decided to cancel.
			// Coach needs to be notified
			N.sendNotification(coach, N.NOTIFICATION_TYPE_USER_CANCELLED_LINK_REQUEST, user, coach);

		} else {
			// if not linked nor rejected, this is a new request.
			// Coach needs to be notified
			N.sendNotification(coach, N.NOTIFICATION_TYPE_USER_SENT_LINK_REQUEST, user, coach);

			return;

		}

	} else {

		console.error("Coach user link added but no user and coach ");
	}

});

Parse.Cloud.afterSave("SummaryCard", function(request) {

	var summaryCard = request.object;

	var today = new Date();

	var user = summaryCard.get("user");
	var coach = summaryCard.get("coach");

	var summaryCreatedAt = summaryCard.get("summaryCreatedAt");

	// If what is being saved is a complete summary Card -
	if (utils.setAndWithinSeconds(summaryCreatedAt, today)) {

		// Notify user and Notify Coach

		N.sendNotification(user, N.NOTIFICATION_TYPE_SUMMARY_AVAIALABLE_TO_USER, user, coach, null, summaryCard).then(function() {

			N.sendNotification(coach, N.NOTIFICATION_TYPE_SUMMARY_AVAILABLE_TO_COACH, user, coach, null, summaryCard);

		});

	}

});
/**
 * Send push after meal save..
 */
Parse.Cloud.afterSave("Meal", function(request) {

	var meal = request.object;

	var mealCreatedAt = meal.get("appCreatedAt");

	var coachReviewedAt = meal.get("coachReviewedAt");
	var userReviewedAt = meal.get("userReviewedAt");

	var coachCommentedAt = meal.get("coachCommentedAt");
	var userCommentedAt = meal.get("userCommentedAt");

	var owner = meal.get("owner");
	var coach = meal.get("coach");

	var imageOriginal = meal.get("imageOriginal");

	if (owner && coach) {

		var today = new Date();

		// If within a minute range..
		if (utils.setAndWithinSeconds(coachReviewedAt, today)) {

			// This should be a notification ... that coach has reviewed ..
			//Check if we already have a notification for this meal.. If there is Skip this one ...
			// Check if notification date is older than yyyy ... send another notification...

			N.sendNotification(owner, N.NOTIFICATION_TYPE_COACH_REVIEWED_MEAL, owner, coach, meal);

			return;
		}

		console.log("In owner and Coach - Meal Created At check ");
		if (utils.setAndWithinSeconds(mealCreatedAt, today) && imageOriginal) {
			// Check if we already notified for this meal.. if we did then Skip...

			N.sendNotification(coach, N.NOTIFICATION_TYPE_NEW_MEAL, owner, coach, meal);

			return;
		}

		if (utils.setAndWithinSeconds(coachCommentedAt, today)) {

			N.sendNotification(owner, N.NOTIFICATION_TYPE_COACH_COMMENTED, owner, coach, meal);

			return;
		}

		if (utils.setAndWithinSeconds(userCommentedAt, today)) {

			N.sendNotification(coach, N.NOTIFICATION_TYPE_USER_COMMENTED, owner, coach, meal);

			return;
		}

	} else {
		// Ignore
	}

});

Parse.Cloud.define("pushIt", function(request, response) {

	var coachId = request.params.coachId;
	var userId = request.params.userId;

	var userPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : userId
	};

	var coachPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : coachId
	};

	//Target meals left blank
	N.sendNotification(coachPointer, N.NOTIFICATION_TYPE_NEW_MEAL, userPointer, coachPointer).then(function() {

		response.success("OK");
	}, function(error) {
		console.error(JSON.stringify(error));
		response.error(JSON.stringify(error));
	});

});

/**
 *
 */
Parse.Cloud.define("testRunner", function(request, response) {

	var userId = request.params.userId;

	var action = request.params.action;

	switch(action) {
	case "createAll":
		TestDataModule.createAll().then(function(ok) {
			response.success("OK");
		}, function(error) {
			response.error(JSON.stringify(error));
		});
		break;

	}

	/*

	 var userPointer = {
	 __type : 'Pointer',
	 className : '_User',
	 objectId : userId
	 };

	 var theTest = utils.formatMsg("My {firstName} {lastName} is me", [{
	 key : "firstName",
	 value : "Shoukri"
	 }, {
	 key : "lastName",
	 value : "Kattan"
	 }]);

	 var query = new Parse.Query(Parse.User);

	 query.get(userPointer.objectId, {
	 success : function(fullUser) {
	 response.success(JSON.stringify(fullUser));
	 },
	 error : function(error) {
	 response.error(JSON.stringify(error));
	 }
	 });
	 */
});

//TODO: Data cleanup tasks to be done ..
//Truncate or archive meals , meal images, that are older than x days ...
// Truncate users or archive usrs, older than x days

// TODO : Need to setup test data .. both meals and summaries and everything else....

//TODO: Push notification on summary card has to validate  that this is a full summary card, before taking action, otherwise it is useless...Specially that we create Blank placeholder ones
