var twilio = require("twilio");
var _ = require('underscore.js');
var SummaryModule = require("cloud/summary.js");
var N = require("cloud/notifications.js");
var utils = require("cloud/utils.js");
var TestDataModule = require('cloud/testdata.js');
var Triggers = require('cloud/triggers.js');

twilio.initialize("AC2b2e38289a4d2b9cc7852e706ad05dfb", "e88e51a8d6acb7487bc4b22b8bfb324b");

//Confirm phone Number
Parse.Cloud.define("confirmPhoneNumber", function(request, response) {

	var random4Digit = ("" + Math.random()).substring(2, 6);

	var msg = "Your verification code is " + random4Digit;

	var dUser = request.params.duser;
	var cellNumber = request.params.number;

	var User = Parse.Object.extend("_User");
	var query = new Parse.Query(User);

	query.get(dUser, {
		success : function(userOb) {// Query success

			// Now save the random 4 digit
			userOb.set("phone", cellNumber);
			userOb.set("verificationCode", random4Digit);
			userOb.save();

			twilio.sendSMS({
				From : "+15005550006",
				To : cellNumber,
				Body : msg
			}, {
				success : function(httpResponse) {
					console.log(httpResponse);
					response.success("success");
				},
				error : function(httpResponse) {
					console.error(httpResponse);
					response.error("smsFailed");
				}
			});
			// send of send SMS

		},
		error : function(object, error) {// error with Query to get a User
			// error is a Parse.Error with an error code and message.
			console.error("Query failed " + JSON.stringify(error));
			response.error("unableToLoadUser");
		}
	});
	// end of query.get

});
//confirmPhoneNumber

// Validate Verification Code
Parse.Cloud.define("validateVerificationCode", function(request, response) {

	var dUser = request.params.duser;
	var digits = request.params.digits;

	var User = Parse.Object.extend("_User");
	var query = new Parse.Query(User);

	query.get(dUser, {

		success : function(userOb) {

			var savedCode = userOb.get("verificationCode");

			if (savedCode == digits) {

				userOb.set("phoneVerified", true);
				userOb.save();

				response.success("verified");

			} else {

				response.error("confirmationCodeNotMatching");

			}

		},
		error : function(object, error) {

			console.error("Query failed " + JSON.stringify(error));
			response.error("unableToLoadUser");

		}
	});
	// end query.get

});
// End of validateVerificationCode

//Test Data : {"coachId":"tshO1U2vua","userId":"vXui2W8A7D","beginDate":"2015-05-31T00:00:00.000Z","endDate":"2015-06-07T00:00:00.000Z","profileBeginDate":"2015-05-31T00:00:00.000Z","beginWeekDay":"0"}
//Begin load meals cloud function
// Need to test scenario where week 0
// Need to test scenario where in Week 0 there are 0 meals.
//TODO: Need a trigger ... On Save of new user .. create Summary Card 1
Parse.Cloud.define("runUserSummary", function(request, response) {

	var coachId = request.params.coachId;
	var userId = request.params.userId;

	var beginDate = request.params.beginDate;
	var endDate = request.params.endDate;
	var profileBeginDate = request.params.profileBeginDate;
	var beginWeekDay = request.params.beginWeekDay;

	var userPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : userId
	};

	var coachPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : coachId
	};

	var ret = SummaryModule.saveUserMealSummary(coachPointer, userPointer, beginDate, endDate, profileBeginDate, beginWeekDay);

	ret.then(function() {
		response.success("Summary Run Successful");
	}, function(error) {
		response.error("Error running summary " + JSON.stringify(error));
	});

});
// end of cloud function Load Melas

Parse.Cloud.define("runUsersSummary", function(request, response) {

	SummaryModule.processUsersSummary().then(function() {
		response.success("Summary Run Successfully");
	}, function(error) {
		response.error("Error Running Summary " + JSON.stringify(error));
	});

});
// end of cloud function runSummary

// Weekly Summary Cron Job
Parse.Cloud.job("weeklySummary", function(request, status) {

	// This runs past midnight ... every night ...
	// if this runs midnight ... then it needs to process day before ... or Start day is Today ...

	// End of week = Start of week -1
	// Start of week = end + 1

	// This job wakes up daily, checks day of week

	// Loads all users whose end of week day is set to be same as today
	// For each of them, labels the weeks , and creates end of week summary

	// Set up to modify user data
	Parse.Cloud.useMasterKey();

	SummaryModule.processUsersSummary().then(function() {
		status.success("Summary Run Successfully");
	}, function(error) {
		status.error("Error Running Summary " + JSON.stringify(error));
	});

});
// end of weekly summary job

// Make sure that CoachID is unique.

Parse.Cloud.define("pushIt", function(request, response) {

	var coachId = request.params.coachId;
	var userId = request.params.userId;

	var userPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : userId
	};

	var coachPointer = {
		__type : 'Pointer',
		className : '_User',
		objectId : coachId
	};

	//Target meals left blank
	N.sendNotification(coachPointer, N.NOTIFICATION_TYPE_NEW_MEAL, userPointer, coachPointer).then(function() {

		response.success("OK");
	}, function(error) {
		console.error(JSON.stringify(error));
		response.error(JSON.stringify(error));
	});

});

/**
 *
 */
Parse.Cloud.define("testRunner", function(request, response) {

	var userId = request.params.userId;

	var coachId = request.params.coachId;

	var action = request.params.action;

	switch(action) {
	case "createAll":
		TestDataModule.createAll().then(function(ok) {
			response.success("OK");
		}, function(error) {
			response.error(JSON.stringify(error));
		});
		break;
	case "createMeals":

		var user = {
			__type : 'Pointer',
			className : '_User',
			objectId : userId
		};

		var coach = {
			__type : 'Pointer',
			className : '_User',
			objectId : coachId
		};

		var weekStart = new Date(request.params.weekStartDate);

		TestDataModule.createDataForMeal(weekStart, user, coach).then(function(ok) {
			response.success("OK");
		}, function(error) {
			response.error(JSON.stringify(error));
		});
		break;
	}

});

//TODO: Data cleanup tasks to be done ..
//Truncate or archive meals , meal images, that are older than x days ...
// Truncate users or archive usrs, older than x days

/**
 * Triggers Section
 */
Parse.Cloud.beforeSave(Parse.User, Triggers.beforeSaveUser);
Parse.Cloud.beforeSave("CoachUserLink", Triggers.beforeSaveCoachUserLink);
Parse.Cloud.afterSave("CoachUserLink", Triggers.afterSaveCoachUserLink);
Parse.Cloud.afterSave("SummaryCard", Triggers.afterSaveSummaryCard);
Parse.Cloud.afterSave("Meal", Triggers.afterSaveMeal);
