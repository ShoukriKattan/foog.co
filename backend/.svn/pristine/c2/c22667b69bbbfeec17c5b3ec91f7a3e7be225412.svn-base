var Notifications = require("cloud/notifications.js");
var utils = require("cloud/utils.js");
var summary = require("cloud/summary.js");

//TODO: Add trigger afterSave ClientInfo. Copy day of week . to User table

var beforeSaveMeal = function(request, response) {

	request.object.set("changedFields", request.object.dirtyKeys());

	response.success();

};

var afterSaveMeal = function(request) {

	var meal = request.object;

	var changedFields = meal.get("changedFields");

	var user = meal.get("user");
	var coach = meal.get("coach");

	if (user && coach) {

		// Based on changed fields .. Decide what to notify about;

		var notificationType = null;

		if (utils.fieldChanged(changedFields, "coachCommentedAt")) {

			notificationType = Notifications.NOTIFICATION_TYPE_COACH_COMMENTED;

		} else if (utils.fieldChanged(changedFields, "userCommentedAt")) {

			notificationType = Notifications.NOTIFICATION_TYPE_USER_COMMENTED;

		} else if (utils.fieldChanged(changedFields, "coachReviewedAt")) {

			notificationType = Notifications.NOTIFICATION_TYPE_COACH_REVIEWED_MEAL;

		} else if (utils.fieldChanged(changedFields, "appCreatedAt")) {

			notificationType = Notifications.NOTIFICATION_TYPE_NEW_MEAL;

		}

		if (notificationType) {
			Notifications.sendNotification(user, notificationType, user, coach, meal);
		}

	}

};

var beforeSaveUser = function(request, response) {

	//TODO: Revise this code...
	// Hold CoachID

	var coachId = request.object.get("coachId");

	var objectId = request.object.id;

	// Make sure this call is to register new Coach.
	if (coachId && !objectId) {
		// Make sure that CoachID is not already taken.
		var query = new Parse.Query("User");
		query.equalTo("coachId", coachId);
		query.first({
			success : function(object) {
				if (object) {
					response.error("CoachIdIsTaken");
				} else {
					response.success();
				}
			},
			error : function(error) {
				response.error("Could not validate uniqueness CoachID");
			}
		});
	} else {
		response.success();
	}
};

var beforeSaveCoachUserLink = function(request, response) {

	request.object.set("changedFields", request.object.dirtyKeys());

	// Hold CoachID
	var coachId = request.object.get("coachId");

	// If no coach ID is set, this is a request from CloudCode not app.
	if (!coachId) {
		response.success();
		return;
	}

	// Find Coach User object with provided CoachID.
	var query = new Parse.Query(Parse.User);
	query.equalTo("coachId", coachId);
	query.first({
		success : function(coach) {
			if (coach) {
				// Replace CoachID within CoachUserLink with Coach User object.
				request.object.unset("coachId");
				request.object.set("coach", coach);

				response.success();

			} else {
				response.error("CoachNotFound");
			}
		},
		error : function(error) {
			response.error("QueryError");
		}
	});

};

/**
 * @param {Object} request
 */
var afterSaveCoachUserLink = function(request) {

	//Validate if this is a new user link and not an update...

	var coachUserLink = request.object;

	var changedFields = coachUserLink.get("changedFields");

	var terminatedBy = coachUserLink.get("terminatedBy");
	var coach = coachUserLink.get("coach");
	var user = coachUserLink.get("user");

	// User and Coach need both be set
	if (user && coach) {

		if (utils.fieldChanged(changedFields, "linkedAt")) {
			// New LINK

			// Get the user...
			var userQuery = new Parse.Query(Parse.User);

			userQuery.get(user.id).then(function(theUser) {

				Parse.Cloud.useMasterKey();
				theUser.set("coach", coach);

				return theUser.save();
			}).then(function(savedUser) {

				Notifications.sendNotification(user, Notifications.NOTIFICATION_TYPE_COACH_ACCEPTED_LINK_REQUEST, user, coach);

			}, function(error) {
				console.error("afterSaveCoachUserLink linkedAt" + JSON.stringify(error));
			});

		} else if (utils.fieldChanged(changedFields, "rejectedAt")) {

			// Coach rejected linking request ... Oh no !
			// User needs to be notified
			Notifications.sendNotification(user, Notifications.NOTIFICATION_TYPE_COACH_REJECTED_LINK_REQUEST, user, coach);

		} else if (utils.fieldChanged(changedFields, "cancelledAt")) {
			// User got bored of waiting and decided to cancel.
			// Coach needs to be notified
			Notifications.sendNotification(coach, Notifications.NOTIFICATION_TYPE_USER_CANCELLED_LINK_REQUEST, user, coach);

		} else if (utils.fieldChanged(changedFields, "terminatedAt")) {

			// Get the user...
			var userQuery = new Parse.Query(Parse.User);

			userQuery.get(user.id).then(function(theUser) {

				Parse.Cloud.useMasterKey();

				theUser.unset("coach");

				return theUser.save();
			}).then(function() {

				if (terminatedBy == user) {
					Notifications.sendNotification(coach, Notifications.NOTIFICATION_TYPE_USER_UNLINKED, user, coach);
				} else {
					Notifications.sendNotification(user, Notifications.NOTIFICATION_TYPE_COACH_UNLINKED, user, coach);
				}

			}, function(error) {
				console.error("afterSaveCoachUserLink terminatedAt" + JSON.stringify(error));
			});

		} else {

			console.log("Fields Changed in this case " + JSON.stringify(changedFields));
			// if not linked nor rejected, this is a new request.
			// Coach needs to be notified
			Notifications.sendNotification(coach, Notifications.NOTIFICATION_TYPE_USER_SENT_LINK_REQUEST, user, coach);

			return;

		}

	}

};

var afterSaveSummaryCard = function(request) {

	var summaryCard = request.object;

	var user = summaryCard.get("user");
	var coach = summaryCard.get("coach");

	var summaryCreatedAt = summaryCard.get("summaryCreatedAt");

	// No need to be fancy .. If Summary Created At is set, this means this is a complete summary Card... No Fancy Shmancy .
	// When they update summary cards. no one but batch touch summary Created At date..
	if (summaryCreatedAt) {

		// Notify user and Notify Coach

		Notifications.sendNotification(user, Notifications.NOTIFICATION_TYPE_SUMMARY_AVAIALABLE_TO_USER, user, coach, null, summaryCard).then(function() {

			Notifications.sendNotification(coach, Notifications.NOTIFICATION_TYPE_SUMMARY_AVAILABLE_TO_COACH, user, coach, null, summaryCard);

		});

	}

};

var afterClientInfo = function(request) {

	var clientInfo = request.object;
	var user = clientInfo.get("user");
	var coach = clientInfo.get("coach");

	// Create summary card of 0
	summary.createWeekSummaryCard(1, user, coach).then(function(summaryCard) {

	}, function(error) {
		console.error("afterClientInfoERR " + JSON.stringify(error));
	});

};

exports.afterSaveMeal = afterSaveMeal;
exports.afterSaveSummaryCard = afterSaveSummaryCard;
exports.beforeSaveUser = beforeSaveUser;
exports.beforeSaveCoachUserLink = beforeSaveCoachUserLink;
exports.afterSaveCoachUserLink = afterSaveCoachUserLink;
exports.beforeSaveMeal = beforeSaveMeal;
exports.afterClientInfo = afterClientInfo;
